<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on J.Q.HUO</title>
    <link>https://tgreenvand.github.io/post/</link>
    <description>Recent content in Posts on J.Q.HUO</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 17 Aug 2021 22:30:37 +0100</lastBuildDate>
    
	<atom:link href="https://tgreenvand.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>我的2022秋招</title>
      <link>https://tgreenvand.github.io/post/jobinterviewin2020/</link>
      <pubDate>Tue, 17 Aug 2021 22:30:37 +0100</pubDate>
      
      <guid>https://tgreenvand.github.io/post/jobinterviewin2020/</guid>
      <description>&lt;p&gt;对于我而言，我的秋招过程就是一个不断经历失败，同时也不断突破自我的过程。很庆幸，不论是出于兴趣，还是盲目跟风，我最终选择了走CS这条路，这是一个需要和计算机进行沟通，更需要和自己进行沟通的领域。也希望自己在这趟旅程中尽可能说服自己，求一个念头通达，圆融如意。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>对数位dp的理解</title>
      <link>https://tgreenvand.github.io/post/digitdp/</link>
      <pubDate>Sat, 14 Aug 2021 22:48:50 +0100</pubDate>
      
      <guid>https://tgreenvand.github.io/post/digitdp/</guid>
      <description>我开始做数位dp相关习题的最主要原因就是被7.30阿里笔试第一题虐到了&amp;hellip;当时答完题直接自闭，第一题都没做出来，然后上牛客看一个的解法说是数位dp，之后一查居然是算法竞赛才会研究的专题orz&amp;hellip;不管怎么说最近的一段研究也算是让我摆脱了“大区间内满足条件的数字个数查找”类型的题目无从下手的尴尬处境，接下来就谈谈我对这类题目以及数位dp的看法
什么是数位dp 简单来说是对给定的一个相对大的数n，将n的从高到低位用一个数组保存，然后通过分析n的各个数位之间的依赖关系（通常是题目的约束条件，比如相邻两个数字之差啥的）进行动态规划的一个过程（这里用记忆化dfs实现比较好理解）
数位dp可以用来解决大区间内满足条件的数的个数查找类问题，让我们通过以下题目来对数位dp进行一个感性的认知：
 leetcode 233 数字1的个数
给定一个整数n，计算所有小于等于n的非负整数中数字1出现的个数，其中1&amp;lt;=n&amp;lt;=10^8
  leetcode 1067 范围内的数字计数
给定一个在 0到 9 之间的整数 d，和两个正整数 low 和 high 分别作为上下界。返回 d在 low 和 high 之间的整数中出现的次数，包括边界 low 和 high
  leetcode 600 不含连续1的非负整数个数
给定一个正整数 n，找出小于或等于 n 的非负整数中，其二进制表示不包含 连续的1的个数。
  leetcode 902 最大为N的数字组合
我们有一组排序的数字 D，它是 {&#39;1&#39;,&#39;2&#39;,&#39;3&#39;,&#39;4&#39;,&#39;5&#39;,&#39;6&#39;,&#39;7&#39;,&#39;8&#39;,&#39;9&#39;} 的非空子集。（请注意，&amp;lsquo;0&amp;rsquo; 不包括在内。）
现在，我们用这些数字进行组合写数字，想用多少次就用多少次。例如 D = {&#39;1&#39;,&#39;3&#39;,&#39;5&#39;}，我们可以写出像 &#39;13&#39;, &#39;551&#39;, &#39;1351315&#39; 这样的数字。
返回可以用 D 中的数字写出的小于或等于 N 的正整数的数目
 代码模版以及分析过程 我会结合代码模版来对数位dp问题进行一轮分析
python代码模版如下（以leetcode 233为例）：
class Solution: def __init__(self): # 初始化n的上界数组a # 初始化记忆化数组dp，通常dp的大小需要通过分析题目来得出 self.</description>
    </item>
    
    <item>
      <title>字符编码</title>
      <link>https://tgreenvand.github.io/post/how_to_store_string_in_computer/</link>
      <pubDate>Mon, 09 Aug 2021 20:40:21 +0100</pubDate>
      
      <guid>https://tgreenvand.github.io/post/how_to_store_string_in_computer/</guid>
      <description>字符编码指的是对每一个独一无二的字符赋予一个数字，然后将这个数字转换成计算机二进制补码的方式存储，这样计算机就可以识别每个字符了。
目前耳熟能详的对字符进行编码的方法有ASCII、Unicode和UTF-8，本文主要介绍这三种编码方式的区别以及演化
字符编码的演化 总的来说，ASCII（发音为&amp;quot;askey&amp;rdquo;）编码方式用7位二进制数编码了128个字符，最高位统一规定为0. ASCII编码主要面对的是大小写英文字母，数字0-9，各种标点符号以及一些特殊字符。
由于世界上的字符远不止128个，各个国家的语言也会有其特殊的字符存在，所以需要一种统一的编码方式来对世界上可能存在的所有字符进行编码，于是就诞生了Unicode统一码，Unicode采用定长的方式对每个字符进行编码
Unicode暴露的问题是，如果对每个字符都用定长编码，对于一些只需要单字节存储的字符来说，存储的成本较高，于是出现了多种Unicode编码的实现方式，UTF-8就是其中的一种。
UTF-8以字节为单位对Unicode进行编码，实现了对于长字符编码长度较长，短字符编码长度较短的效果</description>
    </item>
    
  </channel>
</rss>